{"version":3,"sources":["components/RedditCard/RedditCard.jsx","config.js","containers/home/Home.jsx","components/TopicBar/TopicBar.jsx","components/Topic/Topic.jsx","routes.js","App.js","serviceWorker.js","index.js"],"names":["RedditCard","props","onClickTopic","topic","window","location","href","state","className","onClick","leg","data","display_name","this","icon_img","src","React","Component","config","api","listUrl","MAX_ATTACHMENT_SIZE","Home","listsData","getRedditLists","axios","get","Config","then","response","tempData","children","setState","catch","err","console","info","map","value","TopicBar","navigateToTopic","open","url","date","toLocaleDateString","Date","day","month","year","title","author","class","score","Topic","backHome","topicsDetails","topicName","getTopicDetails","id","URLSearchParams","search","log","subreddit","routes","path","exact","main","routeProps","App","basename","route","index","key","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.43ef4c6c.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport \"./RedditCard.scss\";\nimport \"@progress/kendo-theme-default/dist/all.css\";\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardImage,\n} from \"@progress/kendo-react-layout\";\n\nclass RedditCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  onClickTopic = (topic) => {\n    window.location.href = `/topic-details?topic=${topic}`;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div\n          className=\"card-wrapper\"\n          onClick={() => {\n            this.onClickTopic(this.props.leg.data.display_name);\n          }}\n        >\n          <Card className=\"card\">\n            <CardBody className=\"card-body\">\n              <CardTitle className=\"card-title\">\n                {this.props.leg.data.display_name}\n              </CardTitle>\n            </CardBody>\n            <div className=\"img-container\">\n              {this.props.leg.data.icon_img ? (\n                <CardImage src={this.props.leg.data.icon_img} />\n              ) : (\n                <span\n                  className=\"k-icon k-i-image\n                  .k-i-photo empty-card\"\n                ></span>\n              )}\n            </div>\n          </Card>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default RedditCard;\n","const dev = {\n  api: {\n    listUrl: \"https://www.reddit.com/subreddits/popular.json?raw_json=1\",\n  },\n};\n\nvar config = dev;\n\nexport default {\n  MAX_ATTACHMENT_SIZE: 5000000,\n  ...config,\n};\n","import React from \"react\";\nimport \"./Home.scss\";\nimport axios from \"axios\";\nimport RedditCard from \"../../components/RedditCard/RedditCard\";\nimport Config from \"../../../src/config.js\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listsData: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getRedditLists();\n  }\n\n  getRedditLists() {\n    axios\n      .get(Config.api.listUrl)\n      .then((response) => {\n        let tempData = response.data.data.children;\n        this.setState({\n          listsData: tempData,\n        });\n      })\n      .catch((err) => {\n        console.info(err);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"home-wrapper\">\n        <div className=\"landing-page\">\n          <div className=\"title-container\">\n            <h1 className=\"home-title\"> Topics</h1>\n          </div>\n          {this.state.listsData.map((value) => {\n            return <RedditCard leg={value} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Fragment } from \"react\";\nimport \"./TopicBar.scss\";\n\nclass TopicBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  navigateToTopic = () => {\n    window.open(this.props.leg.data.url);\n  };\n\n  formatDate(date) {\n    if (date == null) {\n      return \"\";\n    }\n    if (!typeof date.toLocaleDateString === \"function\") {\n      return \"\";\n    }\n    date = new Date(date);\n    return (\n      date.toLocaleDateString(\"en-US\", { day: \"numeric\" }) +\n      \"-\" +\n      date.toLocaleDateString(\"en-US\", { month: \"short\" }) +\n      \"-\" +\n      date.toLocaleDateString(\"en-US\", { year: \"numeric\" })\n    );\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"topic-container\" onClick={this.navigateToTopic}>\n          <div className=\"topic-title\">{this.props.leg.data.title}</div>\n          <div className=\"details-container\">\n            <div className=\"author-container\">\n              <span className=\"k-icon k-i-user author-icon\"></span>\n              <span className=\"topic-author\">{this.props.leg.data.author}</span>\n            </div>\n\n            <div className=\"likes-container\">\n              <span class=\"k-icon k-i-star k-i-bookmark\"></span>\n              <span className=\"created-date\">\n                {this.props.leg.data.score ? this.props.leg.data.score : \"-\"}\n              </span>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default TopicBar;\n","import React from \"react\";\nimport \"./Topic.scss\";\nimport axios from \"axios\";\nimport TopicBar from \"../TopicBar/TopicBar\";\n\nclass Topic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topicsDetails: [],\n      topicName: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getTopicDetails();\n  }\n\n  backHome = () => {\n    window.location.href = \"/\";\n  };\n\n  getTopicDetails() {\n    let topic = new URLSearchParams(window.location.search);\n    let id = topic.get(\"topic\");\n\n    axios\n      .get(`https://www.reddit.com/r/${id}/hot.json`)\n      .then((response) => {\n        console.log(response);\n        this.setState({\n          topicsDetails: response.data.data.children,\n          topicName: response.data.data.children[0].data.subreddit,\n        });\n      })\n      .catch((err) => {\n        console.info(err);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"content-wrapper\">\n        <div className=\"header\">\n          <span\n            className=\"k-icon k-i-arrow-chevron-left img-container\"\n            onClick={this.backHome}\n          ></span>\n          <span className=\"title\">{this.state.topicName}</span>\n        </div>\n        <div className=\"empty\"></div>\n        {this.state.topicsDetails.map((value) => {\n          return <TopicBar leg={value} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Topic;\n","import React from \"react\";\nimport Home from \"./containers/home/Home.jsx\";\nimport Topic from \"./components/Topic/Topic.jsx\";\n\nexport const routes = [\n  {\n    path: \"/\",\n    exact: true,\n    main: (routeProps) => <Home {...routeProps} />,\n  },\n  {\n    path: \"/topic-details\",\n    exact: true,\n    main: (routeProps) => <Topic {...routeProps} />,\n  },\n];\n","import React from \"react\";\nimport { routes } from \"./routes\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\nimport { Switch } from \"react-router\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter basename=\"/\">\n        <div>\n          <div>\n            <Switch>\n              {routes.map((route, index) => (\n                <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  render={route.main}\n                />\n              ))}\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}